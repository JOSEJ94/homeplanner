name: Bump Version and Commit

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version number (optional)'
        required: false
      version_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  bump-version:
    runs-on: macos-latest
    environment: Staging
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '21'

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'

      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          KEY_ID=$(gpg --list-keys --with-colons | grep pub | awk -F: '{print $5}')
          echo "KEY_ID=$KEY_ID" >> $GITHUB_ENV

      - name: Configure git to use GPG key
        run: |
          git config --global user.signingkey $KEY_ID
          git config --global commit.gpgSign true
          git config --global user.email ${{ secrets.SIGNER_EMAIL }}
          git config --global user.name ${{ secrets.SIGNER_NAME }}
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
        env:
          KEY_ID: ${{ env.KEY_ID }}
          GPG_TTY: /dev/tty

      - name: Install specific Bundler version
        run: |
          BUNDLER_VERSION=$(grep -A 1 "BUNDLED WITH" android/Gemfile.lock | tail -n 1 | xargs)
          gem install bundler -v $BUNDLER_VERSION

      - name: Install Fastlane dependencies
        run: |
          cd android
          bundle install
          cd ../ios
          bundle install
          cd ..

      - name: Determine new version
        id: determine_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            NEW_VERSION=${{ github.event.inputs.version }}
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          else
            echo "No version provided, determining new version using version type"
          fi

      - name: Bump version using Fastlane
        run: |
          if [ -n "${{ env.NEW_VERSION }}" ]; then
            npm version env.NEW_VERSION --no-git-tag-version && (cd android && bundle exec fastlane bump) && (cd ios && bundle exec fastlane bump)
          else
            if [ "${{ github.event.inputs.version_type }}" == "patch" ]; then
              yarn bump-patch
            elif [ "${{ github.event.inputs.version_type }}" == "minor" ]; then
              yarn bump-minor
            elif [ "${{ github.event.inputs.version_type }}" == "major" ]; then
              yarn bump-major
            fi
          fi

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'chore: bump version to $(node -p "require(\"./package.json\").version")'
          branch: main
          commit_user_name: ${{ secrets.SIGNER_NAME }}
          commit_user_email: ${{ secrets.SIGNER_EMAIL }}
          signoff: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
